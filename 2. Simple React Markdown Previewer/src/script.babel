const initialText = `# Welcome to my React Markdown Previewer!

## This is a sub-heading...
### And here's some other cool stuff:
  
Heres some code, \`<div></div>\`, between 2 backticks.

\`\`\`
// this is multi-line code:

function anotherExample(firstLine, lastLine) {
  if (firstLine == '\`\`\`' && lastLine == '\`\`\`') {
    return multiLineCode;
  }
}
\`\`\`
  
You can also make text **bold**... whoa!
Or _italic_.
Or... wait for it... **_both!_**
And feel free to go crazy ~~crossing stuff out~~.

There's also [links](https://www.freecodecamp.com), and
> Block Quotes!

And if you want to get really crazy, even tables:

Wild Header | Crazy Header | Another Header?
------------ | ------------- | ------------- 
Your content can | be here, and it | can be here....
And here. | Okay. | I think we get it.

- And of course there are lists.
  - Some are bulleted.
     - With different indentation levels.
        - That look like this.


1. And there are numbererd lists too.
1. Use just 1s if you want! 
1. But the list goes on...
- Even if you use dashes or asterisks.
* And last but not least, let's not forget embedded images:

![React Logo w/ Text](https://goo.gl/Umyytc)
`;

class ReactApp extends React.Component{
  constructor(props){
    super(props);
    //markdown previewer interprets carriage returns and renders them as br (line break) elements.
    marked.setOptions({
      breaks: true
    })
    this.state = {
      editorText: initialText,
      previewText: marked(initialText)
    }
    this.handleChange = this.handleChange.bind(this);
  }
  
  handleChange(e){
    this.setState({
      editorText: e.target.value,
      previewText: marked(e.target.value)
    })
  }
  
  render(){
    let { editorText, previewText } = this.state
    return (
      <React.Fragment>
        <h1 id="heading">Simple React Markdown Previewer</h1>
        <Editor value={editorText} onChange={this.handleChange}/>
        <Preview>{previewText}</Preview>
      </React.Fragment>
    )
  }
}

const Editor = (props)=>{
  return (
    <div className="box">
      <h3 className="panel-heading editor-heading">Editor</h3>
      <div id="editor-div">
        <textarea id="editor" onChange={props.onChange}>{props.value}</textarea>
      </div>
    </div>
  )
}

const Preview = (props)=>{
  return (
    <div className="box">
      <h3 className="panel-heading preview-heading">Preview</h3>
      <div id="preview" dangerouslySetInnerHTML={{ __html: props.children }}></div>
    </div>
  )
}
ReactDOM.render(<ReactApp />, document.getElementById("root"))